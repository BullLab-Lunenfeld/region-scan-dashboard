"use client";

import React from "react";
import {
  Grid2 as Grid,
  Typography,
  Link as MuiLink,
  Box,
  alpha,
  darken,
} from "@mui/material";
import { StaticImport } from "next/dist/shared/lib/get-img-props";
import Image from "next/image";
import uploadButton from "../../../public/upload-button.png";
import uploadVariantsButton from "../../../public/upload-variants-button.png";
import variantDropdown from "../../../public/variant-dropdown.png";
import miamiDynamic from "../../../public/miami-dynamic-y.png";
import miamiOverflow1 from "../../../public/miami-overflow-1.png";
import miamiOverflow2 from "../../../public/miami-overflow-2.png";
import qqPlot from "../../../public/qq-plot.png";
import regionAnnotation from "../../../public/region-plot-annotation.png";
import plinkPlot from "../../../public/plink-plot.png";

export default function page() {
  return (
    <Grid container justifyContent="center">
      <Grid container direction="column" spacing={3} size={{ xs: 12, md: 8 }}>
        <Grid>
          <Typography textAlign="center" variant="h2">
            Tutorial
          </Typography>
        </Grid>
        <Grid container direction="column" spacing={1}>
          <Grid>
            <Typography variant="h4">1. Uploading Data</Typography>
          </Grid>
          <Grid container direction="column">
            <Grid>
              <Typography variant="h6">Data requirements</Typography>
            </Grid>
            <Grid>
              <Typography>
                The application is designed to render data generated by{" "}
                <MuiLink
                  target="_blank"
                  href="https://academic.oup.com/bioinformaticsadvances/article/5/1/vbaf052/8075147?login=false"
                >
                  RegionScan
                </MuiLink>{" "}
                analyses and field names and value ranges are expected to match
                those of RegionScan outputs. The current list of supported field
                names for <Strong>region</Strong> files is:{" "}
              </Typography>
            </Grid>
            <Grid container justifyContent="center">
              <FieldNameGrid
                names={[
                  "chr",
                  "region",
                  "start.bp",
                  "end.bp",
                  "max.VIF",
                  "Wald",
                  "Wald.df",
                  "Wald.p",
                  "MLCB",
                  "MLCB.df",
                  "MLCB.p",
                  "MLCZ",
                  "MLCZ.df",
                  "MLCZ.p",
                  "LCB",
                  "LCB.df",
                  "LCB.p",
                  "LCZ",
                  "LCZ.df",
                  "LCZ.p",
                  "PC80",
                  "PC80.df",
                  "PC80.p",
                  "SKAT",
                  "SKAT.pDavies",
                  "SKAT.pLiu",
                  "SKATO.pOptadj",
                  "GATES.df",
                  "GATES.p",
                  "SimpleM.p",
                ]}
              />
            </Grid>
            <Grid>
              <Typography>
                The current list of supported field names for{" "}
                <Strong>variable</Strong> files is:{" "}
              </Typography>
              <Grid container justifyContent="center">
                <FieldNameGrid
                  names={[
                    "chr",
                    "region",
                    "start.bp",
                    "end.bp",
                    "variant",
                    "pos",
                    "multiallelicSNP",
                    "major.allele",
                    "minor.allele",
                    "maf",
                    "bin",
                    "MLC.flip",
                    "VIF",
                    "glm.beta",
                    "glm.se",
                    "glm.pval",
                    "LCBbin",
                    "LCBbin.p",
                    "LCZbin",
                    "LCZbin.p",
                    "vifbin",
                    "glmbin.beta",
                    "glmbin.se",
                    "glmbin.pval",
                    "LCBbin_glmByBin",
                    "LCBbin_glmByBin.p",
                    "LCZbin_glmByBin",
                    "LCZbin_glmByBin.p",
                    "sg.beta",
                    "sg.se",
                    "sg.pval",
                  ]}
                />
              </Grid>
            </Grid>
          </Grid>
          <Grid container spacing={1} direction="column">
            <Grid>
              <Typography variant="h6">Uploading data</Typography>
            </Grid>
            <Grid>
              <Typography>
                Use the UPLOAD DATA button at the top of the screen to load your
                RegionScan files. Note that you may select more than one file,
                though subsequent uploads will overwrite existing data.
              </Typography>
            </Grid>
            <GridImage
              alt={"upload button"}
              height={174}
              src={uploadButton}
              width={1179}
              widthPct="75%"
            />
            <Grid>
              <Typography>
                Once the region data is uploaded, you may upload variant data
                using the same interface.
              </Typography>
            </Grid>
            <GridImage
              alt={"upload variant button"}
              height={263}
              src={uploadVariantsButton}
              width={1186}
              widthPct="75%"
            />
            <Grid>
              <Typography>
                If your variant file contains data for the range covered by the
                region file(s) you have uploaded, you will be able to add{" "}
                <Code>sglm_pvalue</Code> to the plot
              </Typography>
            </Grid>
            <GridImage
              widthPct="25%"
              height={463}
              width={504}
              alt="variant dropdown"
              src={variantDropdown}
            />
          </Grid>
        </Grid>
        <Grid container direction="column">
          <Grid>
            <Typography variant="h4">2. The Miami Plot</Typography>
          </Grid>
          <Grid>
            <Typography>
              The dropdown controls can be used to select two p-values to view
              in the <Strong>Miami plot</Strong>. By default, the domains of the
              y-axes are dynamically calculated for both plots. To use the same
              y-axis domain for both plots, use the toggle in the settings
              dropdown.
            </Typography>
          </Grid>
          <GridImage
            width={1128}
            height={513}
            widthPct="50%"
            alt="Miami Y toggle"
            src={miamiDynamic}
          />
          <Grid>
            <Typography>
              In case of outliers, a separate y-axis can be rendered after a
              certain threshold. Use the controls in the settings dropdown to
              set the threshold of the p-value as well as the number of pixels
              to give to the second, "overflow" axis.
            </Typography>
          </Grid>
          <GridImage
            src={miamiOverflow1}
            width={1123}
            height={662}
            alt="Miami plot y overflow 1"
            widthPct="50%"
          />
          <GridImage
            src={miamiOverflow2}
            width={956}
            height={499}
            alt="Miami plot y overflow 2"
            widthPct="50%"
          />
        </Grid>
        <Grid container direction="column">
          <Grid>
            <Typography variant="h4">3. The QQ Plot</Typography>
          </Grid>
          <Grid>
            <Typography>
              <Strong>The QQ Plot</Strong> renders observed p-values against
              random variables taken from the uniform distribution over the same
              range. Variables can be added or removed from the plot using the
              checkboxes.
            </Typography>
          </Grid>
          <GridImage
            height={476}
            width={488}
            widthPct="40%"
            src={qqPlot}
            alt="qq-plot"
          />
        </Grid>
        <Grid container direction="column">
          <Grid>
            <Typography variant="h4">4. The Region Plot</Typography>
          </Grid>
          <Grid>
            <Typography>
              Click on any region in the Miami plot to show the{" "}
              <Strong>Region Plot</Strong>, a detailed rendering of a particular
              region.
            </Typography>
          </Grid>
          <Grid>
            <Typography>
              By default, the region plot shows a 40-region range. Zoom in or
              out by scrolling the mouse wheel or entering the new range in the
              input boxes. The plot can also be dragged left or right.
            </Typography>
          </Grid>
          <Grid>
            <Typography>
              Use the ANNOTATION CONTROLS button to change the appearance of the
              plot. If variants are loaded for the region, their visibility can
              be toggled here. Region labels can also be toggled, along with the
              recombination line.
            </Typography>
          </Grid>
          <Grid>
            <Typography>
              Click the FETCH GENES button to fetch genes for the region from
              the ensemble API. By default, only protein-coding genes are shown.
              To show non-protein-coding genes and to toggle gene name
              visibility, use the annotation controls.
            </Typography>
          </Grid>
          <GridImage
            src={regionAnnotation}
            height={622}
            width={2025}
            widthPct="75%"
            alt="region-annotations"
          />
          <Grid container>
            <Typography>
              Variants from a PLINK analysis can be uploaded via the UPLOAD
              PLINK VARIANT FILE button. Currently PLINK files require the
              following fields:
            </Typography>
          </Grid>
          <Grid container justifyContent="center">
            <FieldNameGrid names={["chrom", "test", "pos", "ref", "alt"]} />
          </Grid>
          <Grid>
            <Typography>
              Currently, only variants with test type <Code>ADD</Code> will be
              rendered.
            </Typography>
          </Grid>
          <GridImage
            width={2074}
            height={598}
            widthPct="75%"
            alt="Region plink plot"
            src={plinkPlot}
          />
        </Grid>
        <Grid container direction="column">
          <Typography variant="h4">5. Performance</Typography>

          <Grid>
            <Typography>
              The application will become slower and the visualisations less
              responsive as more data is loaded into the browser. For best
              performance, it's recommended to load only the data needed for a
              given analysis or graphic. To get an overview, a user might begin
              by uploading the entire genome, and then, once a region of
              interest has been identified, re-uploading the file or files
              associated with that area and browsing further with a region plot.
              This approach will reduce memory usage and make the application
              more efficient, and it is particularly recommended for users who
              intend to upload large variant files in addition to region files.
            </Typography>
          </Grid>
        </Grid>

        {/*<Grid>
          <Typography variant="h5">Exporting</Typography>
        </Grid>
        <Grid>
          <Typography variant="h4">Tips and tricks</Typography>
        </Grid> */}
      </Grid>
    </Grid>
  );
}

interface FieldNameGridProps {
  names: string[];
}

const FieldNameGrid: React.FC<FieldNameGridProps> = ({ names }) => (
  <Grid
    container
    direction="row"
    justifyContent="center"
    spacing={1}
    sx={(theme) => ({
      backgroundColor: alpha(theme.palette.info.light, 0.3),
      padding: 2,
      borderRadius: 2,
      margin: 3,
      width: "75%",
      maxWidth: "800px",
    })}
  >
    {names
      .sort((a, b) => (a.toLowerCase() < b.toLowerCase() ? -1 : 1))
      .map((d) => (
        <Grid key={d}>
          <Box component="pre" margin={0.5}>
            {d}
          </Box>
        </Grid>
      ))}
  </Grid>
);

const Strong: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <Box component="span" fontWeight="bold">
    {children}
  </Box>
);

const Code: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <Box
    component="pre"
    color={(theme) => darken(theme.palette.secondary.dark, 0.2)}
    margin="inherit"
    display="inline"
  >
    {children}
  </Box>
);

interface GridImageProps {
  alt: string;
  height: number;
  src: StaticImport;
  width: number;
  widthPct: string;
}

const GridImage: React.FC<GridImageProps> = ({
  alt,
  height,
  src,
  width,
  widthPct,
}) => (
  <Grid
    size={{ xs: 12 }}
    direction="row"
    flexGrow={1}
    margin={2}
    container
    justifyContent="center"
    sx={{
      img: {
        minWidth: "300px",
        width: widthPct,
        height: "auto",
      },
    }}
  >
    <Grid textAlign="center">
      <Image
        alt={alt}
        height={height}
        priority={false}
        src={src}
        width={width}
      />
    </Grid>
  </Grid>
);
